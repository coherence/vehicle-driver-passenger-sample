// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using System;
    using System.Runtime.InteropServices;
    using System.Collections.Generic;
    using Coherence.ProtocolDef;
    using Coherence.Serializer;
    using Coherence.SimulationFrame;
    using Coherence.Entities;
    using Coherence.Utils;
    using Coherence.Brook;
    using Coherence.Core;
    using Logger = Coherence.Log.Logger;
    using UnityEngine;
    using Coherence.Toolkit;
    public struct _a6f62748104f3194aace021743ab9cc0_437266469125202482 : ICoherenceComponentData
    {
        [StructLayout(LayoutKind.Explicit)]
        public struct Interop
        {
            [FieldOffset(0)]
            public System.Byte IsPassenger;
            [FieldOffset(1)]
            public System.Byte IsDriving;
            [FieldOffset(2)]
            public System.Single MotionSpeed;
            [FieldOffset(6)]
            public System.Byte FreeFall;
            [FieldOffset(7)]
            public System.Byte Grounded;
            [FieldOffset(8)]
            public System.Byte Jump;
            [FieldOffset(9)]
            public System.Single Speed;
        }

        public void ResetFrame(AbsoluteSimulationFrame frame)
        {
            FieldsMask |= _a6f62748104f3194aace021743ab9cc0_437266469125202482.IsPassengerMask;
            IsPassengerSimulationFrame = frame;
            FieldsMask |= _a6f62748104f3194aace021743ab9cc0_437266469125202482.IsDrivingMask;
            IsDrivingSimulationFrame = frame;
            FieldsMask |= _a6f62748104f3194aace021743ab9cc0_437266469125202482.MotionSpeedMask;
            MotionSpeedSimulationFrame = frame;
            FieldsMask |= _a6f62748104f3194aace021743ab9cc0_437266469125202482.FreeFallMask;
            FreeFallSimulationFrame = frame;
            FieldsMask |= _a6f62748104f3194aace021743ab9cc0_437266469125202482.GroundedMask;
            GroundedSimulationFrame = frame;
            FieldsMask |= _a6f62748104f3194aace021743ab9cc0_437266469125202482.JumpMask;
            JumpSimulationFrame = frame;
            FieldsMask |= _a6f62748104f3194aace021743ab9cc0_437266469125202482.SpeedMask;
            SpeedSimulationFrame = frame;
        }

        public static unsafe _a6f62748104f3194aace021743ab9cc0_437266469125202482 FromInterop(IntPtr data, Int32 dataSize, InteropAbsoluteSimulationFrame* simFrames, Int32 simFramesCount)
        {
            if (dataSize != 13) {
                throw new Exception($"Given data size is not equal to the struct size. ({dataSize} != 13) " +
                    "for component with ID 32");
            }

            if (simFramesCount != 0) {
                throw new Exception($"Given simFrames size is not equal to the expected length. ({simFramesCount} != 0) " +
                    "for component with ID 32");
            }

            var orig = new _a6f62748104f3194aace021743ab9cc0_437266469125202482();

            var comp = (Interop*)data;

            orig.IsPassenger = comp->IsPassenger != 0;
            orig.IsDriving = comp->IsDriving != 0;
            orig.MotionSpeed = comp->MotionSpeed;
            orig.FreeFall = comp->FreeFall != 0;
            orig.Grounded = comp->Grounded != 0;
            orig.Jump = comp->Jump != 0;
            orig.Speed = comp->Speed;

            return orig;
        }


        public static uint IsPassengerMask => 0b00000000000000000000000000000001;
        public AbsoluteSimulationFrame IsPassengerSimulationFrame;
        public System.Boolean IsPassenger;
        public static uint IsDrivingMask => 0b00000000000000000000000000000010;
        public AbsoluteSimulationFrame IsDrivingSimulationFrame;
        public System.Boolean IsDriving;
        public static uint MotionSpeedMask => 0b00000000000000000000000000000100;
        public AbsoluteSimulationFrame MotionSpeedSimulationFrame;
        public System.Single MotionSpeed;
        public static uint FreeFallMask => 0b00000000000000000000000000001000;
        public AbsoluteSimulationFrame FreeFallSimulationFrame;
        public System.Boolean FreeFall;
        public static uint GroundedMask => 0b00000000000000000000000000010000;
        public AbsoluteSimulationFrame GroundedSimulationFrame;
        public System.Boolean Grounded;
        public static uint JumpMask => 0b00000000000000000000000000100000;
        public AbsoluteSimulationFrame JumpSimulationFrame;
        public System.Boolean Jump;
        public static uint SpeedMask => 0b00000000000000000000000001000000;
        public AbsoluteSimulationFrame SpeedSimulationFrame;
        public System.Single Speed;

        public uint FieldsMask { get; set; }
        public uint StoppedMask { get; set; }
        public uint GetComponentType() => 32;
        public int PriorityLevel() => 100;
        public const int order = 0;
        public uint InitialFieldsMask() => 0b00000000000000000000000001111111;
        public bool HasFields() => true;
        public bool HasRefFields() => false;


        public long[] GetSimulationFrames() {
            return null;
        }

        public int GetFieldCount() => 7;


        
        public HashSet<Entity> GetEntityRefs()
        {
            return default;
        }

        public uint ReplaceReferences(Entity fromEntity, Entity toEntity)
        {
            return 0;
        }
        
        public IEntityMapper.Error MapToAbsolute(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;
        }

        public IEntityMapper.Error MapToRelative(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;
        }

        public ICoherenceComponentData Clone() => this;
        public int GetComponentOrder() => order;
        public bool IsSendOrdered() => false;

        private static readonly float _MotionSpeed_Min = -9223372036854775808f;
        private static readonly float _MotionSpeed_Max = 9223372036854775807f;
        private static readonly float _Speed_Min = -9223372036854775808f;
        private static readonly float _Speed_Max = 9223372036854775807f;

        public AbsoluteSimulationFrame? GetMinSimulationFrame()
        {
            AbsoluteSimulationFrame? min = null;


            return min;
        }

        public ICoherenceComponentData MergeWith(ICoherenceComponentData data)
        {
            var other = (_a6f62748104f3194aace021743ab9cc0_437266469125202482)data;
            var otherMask = other.FieldsMask;

            FieldsMask |= otherMask;
            StoppedMask &= ~(otherMask);

            if ((otherMask & 0x01) != 0)
            {
                this.IsPassengerSimulationFrame = other.IsPassengerSimulationFrame;
                this.IsPassenger = other.IsPassenger;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.IsDrivingSimulationFrame = other.IsDrivingSimulationFrame;
                this.IsDriving = other.IsDriving;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.MotionSpeedSimulationFrame = other.MotionSpeedSimulationFrame;
                this.MotionSpeed = other.MotionSpeed;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.FreeFallSimulationFrame = other.FreeFallSimulationFrame;
                this.FreeFall = other.FreeFall;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.GroundedSimulationFrame = other.GroundedSimulationFrame;
                this.Grounded = other.Grounded;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.JumpSimulationFrame = other.JumpSimulationFrame;
                this.Jump = other.Jump;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.SpeedSimulationFrame = other.SpeedSimulationFrame;
                this.Speed = other.Speed;
            }

            otherMask >>= 1;
            StoppedMask |= other.StoppedMask;

            return this;
        }

        public uint DiffWith(ICoherenceComponentData data)
        {
            throw new System.NotSupportedException($"{nameof(DiffWith)} is not supported in Unity");
        }

        public static uint Serialize(_a6f62748104f3194aace021743ab9cc0_437266469125202482 data, bool isRefSimFrameValid, AbsoluteSimulationFrame referenceSimulationFrame, IOutProtocolBitStream bitStream, Logger logger)
        {
            if (bitStream.WriteMask(data.StoppedMask != 0))
            {
                bitStream.WriteMaskBits(data.StoppedMask, 7);
            }

            var mask = data.FieldsMask;

            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = data.IsPassenger;
                bitStream.WriteBool(fieldValue);
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = data.IsDriving;
                bitStream.WriteBool(fieldValue);
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                Coherence.Utils.Bounds.Check(data.MotionSpeed, _MotionSpeed_Min, _MotionSpeed_Max, "_a6f62748104f3194aace021743ab9cc0_437266469125202482.MotionSpeed", logger);
                var fieldValue = data.MotionSpeed;
                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = data.FreeFall;
                bitStream.WriteBool(fieldValue);
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = data.Grounded;
                bitStream.WriteBool(fieldValue);
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                var fieldValue = data.Jump;
                bitStream.WriteBool(fieldValue);
            }
            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {
                Coherence.Utils.Bounds.Check(data.Speed, _Speed_Min, _Speed_Max, "_a6f62748104f3194aace021743ab9cc0_437266469125202482.Speed", logger);
                var fieldValue = data.Speed;
                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }
            mask >>= 1;

            return mask;
        }

        public static _a6f62748104f3194aace021743ab9cc0_437266469125202482 Deserialize(AbsoluteSimulationFrame referenceSimulationFrame, InProtocolBitStream bitStream)
        {
            var stoppedMask = (uint)0;
            if (bitStream.ReadMask())
            {
                stoppedMask = bitStream.ReadMaskBits(7);
            }

            var val = new _a6f62748104f3194aace021743ab9cc0_437266469125202482();
            if (bitStream.ReadMask())
            {

                val.IsPassenger = bitStream.ReadBool();
                val.FieldsMask |= _a6f62748104f3194aace021743ab9cc0_437266469125202482.IsPassengerMask;
            }
            if (bitStream.ReadMask())
            {

                val.IsDriving = bitStream.ReadBool();
                val.FieldsMask |= _a6f62748104f3194aace021743ab9cc0_437266469125202482.IsDrivingMask;
            }
            if (bitStream.ReadMask())
            {

                val.MotionSpeed = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _a6f62748104f3194aace021743ab9cc0_437266469125202482.MotionSpeedMask;
            }
            if (bitStream.ReadMask())
            {

                val.FreeFall = bitStream.ReadBool();
                val.FieldsMask |= _a6f62748104f3194aace021743ab9cc0_437266469125202482.FreeFallMask;
            }
            if (bitStream.ReadMask())
            {

                val.Grounded = bitStream.ReadBool();
                val.FieldsMask |= _a6f62748104f3194aace021743ab9cc0_437266469125202482.GroundedMask;
            }
            if (bitStream.ReadMask())
            {

                val.Jump = bitStream.ReadBool();
                val.FieldsMask |= _a6f62748104f3194aace021743ab9cc0_437266469125202482.JumpMask;
            }
            if (bitStream.ReadMask())
            {

                val.Speed = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= _a6f62748104f3194aace021743ab9cc0_437266469125202482.SpeedMask;
            }

            val.StoppedMask = stoppedMask;

            return val;
        }


        public override string ToString()
        {
            return $"_a6f62748104f3194aace021743ab9cc0_437266469125202482(" +
                $" IsPassenger: { this.IsPassenger }" +
                $" IsDriving: { this.IsDriving }" +
                $" MotionSpeed: { this.MotionSpeed }" +
                $" FreeFall: { this.FreeFall }" +
                $" Grounded: { this.Grounded }" +
                $" Jump: { this.Jump }" +
                $" Speed: { this.Speed }" +
                $" Mask: { System.Convert.ToString(FieldsMask, 2).PadLeft(7, '0') }, " +
                $"Stopped: { System.Convert.ToString(StoppedMask, 2).PadLeft(7, '0') })";
        }
    }

}
